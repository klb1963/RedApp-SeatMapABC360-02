// file: /code/utils/XmlViewer.tsx

/**
 * XmlViewer.tsx
 *
 * üìÑ React-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ XML-–¥–æ–∫—É–º–µ–Ω—Ç–∞.
 * –¢–∞–∫–∂–µ –≤–∫–ª—é—á–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞–∫ .xml —Ñ–∞–π–ª–∞.
 */

import * as React from 'react';

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç "—Å—ã—Ä–æ–π" XML –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏.
 *
 * @param xml - –°—Ç—Ä–æ–∫–∞ XML-–¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @returns –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
 */
const formatXml = (xml: string): string => {
    const PADDING = '  ';
    const reg = /(>)(<)(\/*)/g;
    let formatted = '';
    let pad = 0;

    // –í—Å—Ç–∞–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏
    xml = xml.replace(reg, '$1\r\n$2$3');

    // –ü–æ—Å—Ç—Ä–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    xml.split('\r\n').forEach((node) => {
        let indent = 0;

        if (node.match(/.+<\/\w[^>]*>$/)) {
            indent = 0; // –û–¥–∏–Ω–∞—Ä–Ω—ã–π —Ç–µ–≥
        } else if (node.match(/^<\/\w/)) {
            if (pad !== 0) pad -= 1; // –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥
        } else if (node.match(/^<\w([^>]*[^/])?>.*$/)) {
            indent = 1; // –û—Ç–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥
        }

        const padding = PADDING.repeat(pad);
        formatted += padding + node + '\r\n';
        pad += indent;
    });

    return formatted.trim();
};

/**
 * Props –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ XmlViewer
 */
interface XmlViewerProps {
    xml: string;
}

/**
 * XmlViewer ‚Äî –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π XML + –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏.
 */
export const XmlViewer: React.FC<XmlViewerProps> = ({ xml }) => {
    if (!xml || typeof xml !== 'string' || xml.trim().length === 0) {
        return (
            <div style={{ padding: '1rem', color: 'red' }}>
                ‚ùå XML-–¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç.
            </div>
        );
    }

    const formattedXml = formatXml(xml);

    /**
     * üíæ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ XML –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞ .xml
     */
    const downloadXml = () => {
        const blob = new Blob([formattedXml], { type: 'application/xml' });
        const url = URL.createObjectURL(blob);

        const a = document.createElement('a');
        a.href = url;
        a.download = 'soap-response.xml';
        a.click();

        URL.revokeObjectURL(url);
    };

    return (
        <div style={{ padding: '20px', backgroundColor: '#fff', maxHeight: '80vh', overflowY: 'auto' }}>
            {/* üì• –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è */}
            <div style={{ textAlign: 'right', marginBottom: '10px' }}>
                <button onClick={downloadXml} className="btn btn-primary">
                    üì• Download XML
                </button>
            </div>

            {/* üñ•Ô∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ XML */}
            <pre style={{
                whiteSpace: 'pre-wrap',
                wordBreak: 'break-word',
                backgroundColor: '#f5f5f5',
                padding: '15px',
                borderRadius: '8px',
                fontSize: '0.85rem',
                overflowX: 'auto'
            }}>
                {formattedXml}
            </pre>
        </div>
    );
};