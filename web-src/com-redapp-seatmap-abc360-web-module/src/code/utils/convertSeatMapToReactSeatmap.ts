// file: /code/utils/convertSeatMapToReactSeatmap.ts

import { SeatInfo } from '../components/seatMap/types/SeatInfo';

export interface ReactSeat {
  id: string;
  number?: string;
  isReserved?: boolean;
  tooltip?: string;
}

export interface ReactSeatRow {
  rowNumber: number;
  seats: ReactSeat[];
  isExitRow?: boolean;
  isOverwingRow?: boolean;
  deckId?: string; // üÜï –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º—É–ª—å—Ç–∏–¥–µ–∫
}

export interface ReactSeatMapResult {
  rows: ReactSeatRow[];
  layoutLength: number;
}

export function convertSeatMapToReactSeatmapFormat(
  seats: SeatInfo[],
  layoutLetters: string[]
): ReactSeatMapResult {
  const rowsMap: Record<string, Record<string, SeatInfo>> = {};

  // üß© –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–µ—Å–ª–∞ –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ –±—É–∫–≤–∞–º
  for (const seat of seats) {
    const match = seat.seatNumber.match(/^(\d+)([A-Z])$/);
    if (!match) continue;

    const rowNumber = match[1];
    const letter = match[2];

    if (!rowsMap[rowNumber]) rowsMap[rowNumber] = {};
    rowsMap[rowNumber][letter] = seat;
  }

  const result: ReactSeatRow[] = [];

  // üîÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É, —Å–æ–±–∏—Ä–∞–µ–º –∏–∑ –Ω–µ—ë –º–∞—Å—Å–∏–≤ ReactSeat[]
  for (const [rowNumberStr, letterSeatMap] of Object.entries(rowsMap)) {
    const rowNumber = parseInt(rowNumberStr, 10);
    const rowSeats: ReactSeat[] = [];

    const firstSeat = Object.values(letterSeatMap)[0];
    const deckId = firstSeat && 'deckId' in firstSeat ? (firstSeat as any).deckId : 'Maindeck'; // üÜï

    // console.log(`üéØ Seat ${firstSeat?.seatNumber} ‚Üí deckId = ${deckId}`); // new log

    const isExitRow = Object.values(letterSeatMap).some(seat =>
      seat.seatCharacteristics?.includes('E')
    );

    const isOverwingRow = Object.values(letterSeatMap).some(
      seat =>
        seat.seatCharacteristics?.includes('OW') ||
        seat.rowTypeCode === 'K'
    );

    layoutLetters.forEach((col, idx) => {
      if (col === '|') {
        // üö™ –ü—Ä–æ—Ö–æ–¥ –º–µ–∂–¥—É –∫—Ä–µ—Å–µ–ª
        rowSeats.push({
          id: `AISLE-${rowNumber}-${idx}`,
          isReserved: true
        });
      } else {
        const seat = letterSeatMap[col];
        if (!seat) return;

        // console.log('üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞:', seat.seatNumber, seat.seatCharacteristics, seat.seatStatus);

        // ‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º "–º–µ—Å—Ç–∞", –∫–æ—Ç–æ—Ä—ã–µ ‚Äî –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –±—É–∫–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "60")
        if (/^\d+$/.test(seat.seatNumber)) return;

        // ü™ë –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ—Å—Ç–∞ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ GN (–≥–∞–ª–µ—Ä–µ—è) –∏–ª–∏ –∫–æ–¥–æ–º 8 (no seat)
        const isFakeSeat =
          seat.seatCharacteristics?.includes('GN') ||
          seat.seatCharacteristics?.includes('8');

        if (isFakeSeat) {
          rowSeats.push({
            id: `EMPTY-${rowNumber}-${col}`,
            number: '',
            isReserved: true,
            tooltip: '',
          });
          return;
        }

        const isReserved = ['occupied', 'blocked', 'unavailable'].includes(
          seat.seatStatus.toLowerCase()
        );

        // üìù –§–æ—Ä–º–∏—Ä—É–µ–º —Ç—É–ª—Ç–∏–ø: –µ—Å–ª–∏ –º–µ—Å—Ç–æ –ø–ª–∞—Ç–Ω–æ–µ –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ
        const tooltip = [
          seat.seatCharacteristics?.includes('O') ? 'PREFERRED' : '',
          seat.seatPrice ? `‚Ç¨${seat.seatPrice.toFixed(2)}` : ''
        ].filter(Boolean).join(' ');

        rowSeats.push({
          id: seat.seatNumber,
          number: col,
          isReserved,
          tooltip
        });
      }
    });

    // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏
    console.log(`üß© row ${rowNumber} ‚Üí ${rowSeats.length} seats`);

    result.push({
      rowNumber,
      seats: rowSeats,
      isExitRow,
      isOverwingRow,
      deckId
    });
  }

  return {
    rows: result.sort((a, b) => a.rowNumber - b.rowNumber),
    layoutLength: layoutLetters.length
  };
}