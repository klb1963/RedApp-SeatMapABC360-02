// ‚úÖ file: /code/utils/convertSeatMapToReactSeatmap.ts

export interface ReactSeat {
  id: string;
  number?: string;
  isReserved?: boolean;
  tooltip?: string;
}

export interface ReactSeatRow {
  rowNumber: number;
  seats: ReactSeat[];
}

import { SeatInfo } from '../components/seatMap/types/SeatInfo';

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–∞—Å—Å–∏–≤ SeatInfo[] –∏–∑ EnhancedSeatMapRQ –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–Ω—è—Ç–Ω—ã–π react-seatmap
 */
export function convertSeatMapToReactSeatmapFormat(seats: SeatInfo[]): ReactSeatRow[] {
  // ‚ùó –ö–ª—é—á–∏ –æ–±—ä–µ–∫—Ç–∞ –≤ JS –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∏, –ø–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å Record<string, ...>
  const rowsMap: Record<string, ReactSeat[]> = {};

  for (const seat of seats) {
    const rowMatch = seat.seatNumber.match(/^(\d+)([A-Z])$/);
    if (!rowMatch) continue;

    const rowKey = rowMatch[1]; // —Å—Ç—Ä–æ–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä '11'
    const column = rowMatch[2]; // –±—É–∫–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä 'F'
    const isReserved = ['occupied', 'blocked', 'unavailable'].includes(
      seat.seatStatus.toLowerCase()
    );

    if (!rowsMap[rowKey]) {
      rowsMap[rowKey] = [];
    }

    rowsMap[rowKey].push({
      id: seat.seatNumber,
      number: column,
      isReserved,
      tooltip: seat.seatPrice ? `‚Ç¨${seat.seatPrice.toFixed(2)}` : undefined,
    });
  }

  // üéØ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º rowsMap ‚Üí –º–∞—Å—Å–∏–≤ ReactSeatRow[]
  return Object.entries(rowsMap)
    .map(([rowKey, seats]) => ({
      rowNumber: parseInt(rowKey, 10),
      seats: seats.sort((a, b) => a.number!.localeCompare(b.number!)),
    }))
    .sort((a, b) => a.rowNumber - b.rowNumber);
}