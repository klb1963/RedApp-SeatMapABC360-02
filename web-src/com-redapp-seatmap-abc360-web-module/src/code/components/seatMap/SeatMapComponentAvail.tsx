// file: /code/components/seatMap/SeatMapComponentAvail.tsx

/**
 * SeatMapComponentAvail.tsx
 *
 * üß≠ Seat Map Viewer for Availability Scenario ‚Äì RedApp ABC360
 *
 * This React component allows the user to view a seat map based on availability data.
 * It uses standardized components for selecting segments and cabin class,
 * and delegates rendering to SeatMapComponentBase.
 */

import * as React from 'react';
import SeatMapComponentBase from './SeatMapComponentBase';
import { getFlightFromSabreData } from './transformers/getFlightFromSabreData';
import SeatLegend from './panels/SeatLegend';
import { FlightInfoPanel } from './panels/FlidhtInfoPanel';
import { normalizeSegment } from '../../utils/normalizeSegment';
import { SegmentCabinSelector } from './panels/SegmentCabinSelector';
import { mapCabinToCode } from '../../utils/mapCabinToCode';

interface SeatMapComponentAvailProps {
  config: any;
  data: any;
}

const SeatMapComponentAvail: React.FC<SeatMapComponentAvailProps> = ({ config, data }) => {
  const rawSegments = data.flightSegments || [];

  const [segmentIndex, setSegmentIndex] = React.useState(0);
  const [cabinClass, setCabinClass] = React.useState<'Y' | 'S' | 'C' | 'F' | 'A'>('Y');

  // üëÅ –¢–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
  const normalizedSegments = React.useMemo(() => {
    console.log('üîÅ normalizeSegment called for rawSegments');
    return rawSegments.map((seg) =>
      normalizeSegment(seg, { padFlightNumber: false })
    );
  }, [rawSegments]);

  const segment = normalizedSegments[segmentIndex];
  const rawSegment = rawSegments[segmentIndex];

  // üõ´ –ü–∞–Ω–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ
  const flightInfo = (
    <>
      <FlightInfoPanel
        airlineCode={segment.marketingAirline}
        airlineName={segment.marketingAirlineName}
        flightNumber={segment.flightNumber}
        fromCode={segment.origin}
        fromCity={segment.originCityName || ''}
        toCode={segment.destination}
        toCity={segment.destinationCityName || ''}
        date={segment.departureDateTime?.split?.('T')[0] || 'Unknown date'}
        duration={segment.duration}
        aircraft={segment.aircraftDescription}
      />
      <SeatLegend />
    </>
  );

  return (
    <div style={{ padding: '1rem' }}>
      {/* ‚úàÔ∏è –°–µ–ª–µ–∫—Ç–æ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞ –∏ –∫–ª–∞—Å—Å–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è */}
      <SegmentCabinSelector
        flightSegments={normalizedSegments}
        segmentIndex={segmentIndex}
        setSegmentIndex={(index) => {
          setSegmentIndex(index);
          setTimeout(() => setCabinClass('Y'), 0);
        }}
        cabinClass={cabinClass}
        setCabinClass={setCabinClass}
      />

      {/* üí∫ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –º–µ—Å—Ç */}
      <SeatMapComponentBase
        config={config}
        flightSegments={normalizedSegments} // —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        initialSegmentIndex={segmentIndex}
        cabinClass={cabinClass}
        generateFlightData={(_, index, cabin) => {
          const rawSeg = rawSegments[index];

          if (!rawSeg) {
            console.warn('‚ö†Ô∏è rawSegment is missing for index:', index);
            return null;
          }

          // üîç –õ–æ–≥ —Å–µ–≥–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
          console.log('[üîÅ SWITCH]', index, rawSeg);

          return getFlightFromSabreData(
            {
              flightSegments: [
                {
                  ...rawSeg,
                  cabinClass: mapCabinToCode(cabin),
                  equipment: rawSeg.equipmentType ?? rawSeg.aircraftType ?? 'n/a',
                },
              ],
            },
            0 // –≤—Å–µ–≥–¥–∞ –∏–Ω–¥–µ–∫—Å 0, –ø–æ—Ç–æ–º—É —á—Ç–æ –º—ã –ø–µ—Ä–µ–¥–∞—ë–º –º–∞—Å—Å–∏–≤ –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
          );
        }}
        availability={null}
        passengers={[]}
        showSegmentSelector={false}
        flightInfo={flightInfo}
      />
    </div>
  );
};

export default SeatMapComponentAvail;