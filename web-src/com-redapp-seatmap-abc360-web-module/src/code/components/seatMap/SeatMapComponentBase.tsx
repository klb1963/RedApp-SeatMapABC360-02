// file SeatMapComponentBase.tsx

import * as React from 'react';
import { useEffect, useRef, useState } from 'react';
import { mapCabinToCode } from '../../utils/mapCabinToCode';
import { getService } from '../../Context';
import { PublicModalsService } from 'sabre-ngv-modals/services/PublicModalService';

interface SeatMapComponentBaseProps {
  config: any;
  flightSegments: any[];
  initialSegmentIndex?: number;
  generateFlightData: (segment: any, segmentIndex: number, cabinClass?: string) => any;
  cabinClass: 'F' | 'C' | 'S' | 'Y' | 'A' | 'P' | 'B';
  layoutData?: any;
  availability?: any[];
  passengers?: any[];
  showSegmentSelector?: boolean;
  assignedSeats?: { passengerId: string; seat: string }[];
}

const SeatMapComponentBase: React.FC<SeatMapComponentBaseProps> = ({
  config,
  flightSegments,
  initialSegmentIndex = 0,
  generateFlightData,
  cabinClass,
  availability = [],
  passengers = [],
  showSegmentSelector = true,
  assignedSeats
}) => {
  const [segmentIndex, setSegmentIndex] = useState(initialSegmentIndex);
  const [flight, setFlight] = useState<any>(null);
  const iframeRef = useRef<HTMLIFrameElement>(null);
  const [selectedSeat, setSelectedSeat] = useState<any>(null); // üÜï –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ

  const currentSegment = flightSegments[segmentIndex];

  // üÜï –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫

  // –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞
  const handleConfirmSeat = () => {
    if (!selectedSeat) return;
  
    const {
      passengerId,
      seatLabel,
      value,
      currency,
      label,
      flightNumber,
      airlineCode,
      origin,
      destination,
      departureDate
    } = selectedSeat;
  
    const publicModalsService = getService(PublicModalsService);
    const UpdatePNRComponent = require('../../components/pnrServices/UpdatePNR').UpdatePNR;
  
    publicModalsService.showReactModal({
      header: '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Å—Ç–∞',
      component: React.createElement(UpdatePNRComponent, {
        passengerRef: passengerId,
        seatNumber: seatLabel,
        amount: value,
        currency,
        passengerName: label,
        flightNumber,
        airlineCode,
        origin,
        destination,
        departureDate
      }),
      modalClassName: 'seatmap-modal-class'
    });
  };

  // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞
  const handleResetSeat = () => {
    setSelectedSeat(null);

    // üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ iframe
    if (!flight || !iframeRef.current?.contentWindow) return;

    const message: Record<string, string> = {
      type: 'seatMaps',
      config: JSON.stringify(config),
      flight: JSON.stringify(flight),
      currentDeckIndex: '0',
      availability: JSON.stringify(availability),
      passengers: JSON.stringify(passengers)
    };

    console.log('üîÅ –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã –º–µ—Å—Ç –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –≤—ã–±–æ—Ä–∞');
    iframeRef.current.contentWindow.postMessage(message, '*');
  };

  useEffect(() => {
    // —Ç–æ—Ç –∂–µ useEffect –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ flight
    if (!flightSegments.length || !currentSegment) {
      console.warn('‚õî –ù–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ç–µ–∫—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω');
      setFlight(null);
      return;
    }
    const generatedFlight = generateFlightData(currentSegment, segmentIndex, cabinClass);
    if (!generatedFlight || generatedFlight.flightNo === '000' || generatedFlight.airlineCode === 'XX') {
      console.warn('‚õî generateFlightData: flight –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.', generatedFlight);
      setFlight(null);
      return;
    }

    const cabinClassForLib = mapCabinToCode(cabinClass);
    const flightForIframe = {
      ...generatedFlight,
      cabinClass: cabinClassForLib,
      passengerType: 'ADT'
    };

    setFlight(flightForIframe);
  }, [flightSegments, segmentIndex, cabinClass]);

  // ============= –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É ==============

  useEffect(() => {
    const iframe = iframeRef.current;
    if (!iframe) return;
  
    const handleLoad = () => {
      if (!flight || flight.flightNo === '000' || flight.airlineCode === 'XX') return;
  
      const message: Record<string, string> = {
        type: 'seatMaps',
        config: JSON.stringify(config),
        flight: JSON.stringify(flight),
        currentDeckIndex: '0',
        availability: JSON.stringify(availability),
        passengers: JSON.stringify(passengers)
      };
  
      console.log('üì® –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ iframe –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏');
      iframe.contentWindow?.postMessage(message, '*');
    };
  
    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ onload iframe
    iframe.addEventListener('load', handleLoad);
  
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      iframe.removeEventListener('load', handleLoad);
    };
  }, [flight, config, availability, passengers]);

  // ====================================================

  // üëÇ –õ–æ–≤–∏–º seatSelected
  useEffect(() => {
    const appMessageListener = (event: MessageEvent) => {
      const { type, onSeatSelected } = event.data || {};
      if (type === 'seatMaps' && onSeatSelected) {
        console.log('‚úÖ –ú–µ—Å—Ç–æ –≤—ã–±—Ä–∞–Ω–æ:', onSeatSelected);
        setSelectedSeat(onSeatSelected);
      }
    };
    window.addEventListener('message', appMessageListener);
    return () => window.removeEventListener('message', appMessageListener);
  }, []);

  // =============== –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –æ–∫–Ω–µ ================
  return (
    <div style={{ padding: '1rem' }}>
      {/* üëá –°–µ–ª–µ–∫—Ç–æ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω) */}
      {showSegmentSelector && (
        <div style={{ marginBottom: '1rem' }}>
          <label>–°–µ–≥–º–µ–Ω—Ç:</label>
          <select
            value={segmentIndex}
            onChange={(e) => setSegmentIndex(Number(e.target.value))}
          >
            {flightSegments.map((seg: any, idx: number) => (
              <option key={idx} value={idx}>
                {seg.origin} ‚Üí {seg.destination}, —Ä–µ–π—Å {seg.flightNumber}
              </option>
            ))}
          </select>
        </div>
      )}

      {/* üÜï –ë–ª–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è */}
      {selectedSeat && (
        <div
          style={{
            background: '#f0f0f0',
            padding: '1rem',
            marginBottom: '1rem',
            border: '1px solid #ccc'
          }}
        >
              <div style={{ marginBottom: '0.5rem' }}>
                <strong>–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ—Å—Ç–æ:</strong>{' '}
                {/* <span style={{ color: '#007bff' }}>{selectedSeat.seatLabel}</span>{' '}
                –¥–ª—è <span style={{ color: '#28a745' }}>{selectedSeat.label || '–ø–∞—Å—Å–∞–∂–∏—Ä–∞'}</span> */}
              </div>
          <button onClick={handleConfirmSeat} style={{ marginRight: '0.5rem' }}>
            ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
          </button>
          <button onClick={handleResetSeat}>üîÅ –°–±—Ä–æ—Å–∏—Ç—å</button>
        </div>
      )}

      {/* üëâ iframe —Å –∫–∞—Ä—Ç–æ–π —Å–∞–ª–æ–Ω–∞ */}
      <iframe
        ref={iframeRef}
        src="https://quicket.io/react-proxy-app/"
        width="100%"
        height="800"
        style={{ border: '1px solid #ccc' }}
        title="SeatMapIframe"
      />
    </div>
  );
};

export default SeatMapComponentBase;