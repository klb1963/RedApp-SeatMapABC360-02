// file: SeatMapComponentBase.tsx

import * as React from 'react';
import { useEffect, useRef, useState } from 'react';
import { FlightData } from '../../utils/generateFlightData';
import SeatMapModalLayout from './SeatMapModalLayout';

// === Interfaces ===
interface Passenger {
  id: string;
  givenName: string;
  surname: string;
  seatAssignment?: string;
  label?: string;
  initials?: string;
}

interface SelectedSeat {
  passengerId: string;
  seatLabel: string;
}

interface SeatMapComponentBaseProps {
  config: any;
  flightSegments: any[];
  initialSegmentIndex: number;
  showSegmentSelector?: boolean;
  cabinClass: string;
  availability: any[];
  passengers: Passenger[];
  generateFlightData: (segment: any, index: number, cabin: string) => FlightData;
  onSeatChange?: (seats: SelectedSeat[]) => void;
  passengerPanel?: React.ReactNode;
  selectedSeats?: SelectedSeat[];
  flightInfo?: React.ReactNode;
}

// üìå –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
function ensurePassengerIds(passengers: Passenger[]): Passenger[] {
  return passengers.map((p, index) => ({
    ...p,
    id: typeof p.id === 'string' && p.id.trim() !== '' ? p.id : `pax-${index}`
  }));
}

// === Component ===
const SeatMapComponentBase: React.FC<SeatMapComponentBaseProps> = ({
  config,
  flightSegments,
  initialSegmentIndex,
  cabinClass,
  availability,
  passengers,
  generateFlightData,
  onSeatChange,
  flightInfo
}) => {
  const iframeRef = useRef<HTMLIFrameElement>(null);
  // –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º boardingComplete
  const [boardingComplete, setBoardingComplete] = useState(false);

  // ‚úÖ –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ ID –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
  const [cleanPassengers] = useState(() => ensurePassengerIds(passengers));

  const [selectedSeats, setSelectedSeats] = useState<SelectedSeat[]>([]);

  // selectedPassengerId –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—É—Å—Ç–æ–π
  const [selectedPassengerId, setSelectedPassengerId] = useState<string>('');

  // ‚úÖ –°—Ç–∞–≤–∏–º –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –º–∞—Å—Å–∏–≤–∞
  useEffect(() => {
    if (cleanPassengers.length > 0 && !selectedPassengerId) {
      const firstId = String(cleanPassengers[0].id);
      setSelectedPassengerId(firstId);
      console.log('üë§ selectedPassengerId –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', firstId);
    }
  }, [passengers, selectedPassengerId]);

  const segment = flightSegments[initialSegmentIndex];

  const handleResetSeat = () => {
    setSelectedSeats([]);
    setSelectedPassengerId(cleanPassengers.length > 0 ? cleanPassengers[0].id : '');
    onSeatChange?.([]);
    setBoardingComplete(false); // üßΩ –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

    // üîÅ –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É ‚Äî –≤—Å–µ –º–µ—Å—Ç–∞ —Å–±—Ä–æ—à–µ–Ω—ã
    const iframe = iframeRef.current;
    if (!iframe) return;

    const flight = generateFlightData(segment, initialSegmentIndex, cabinClass);
    const availabilityData = availability || [];

    const colorPalette = ['blue', 'purple', 'teal', 'gray', 'green', 'red'];
    
    // initials
    const getInitials = (p: Passenger) =>
      `${p.givenName?.[0] || ''}${p.surname?.[0] || ''}`.toUpperCase();

    const passengerList = cleanPassengers.map((p, index) => ({
      id: p.id,
      passengerType: 'ADT',
      seat: null, // ‚úÖ –Ω–∏–∫–∞–∫–∏—Ö –º–µ—Å—Ç
      passengerLabel: p.label || `${p.givenName}/${p.surname}`,
      passengerColor: colorPalette[index % colorPalette.length],
      initials: getInitials(p),
      abbr: getInitials(p),
      readOnly: true // üîí –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –ø–∞—Å—Å–∏–≤–Ω—ã–µ
    }));

    console.log('üßæ Passenger initials:');
    passengerList.forEach(p =>
      console.log(`${p.passengerLabel} ‚Üí ${p.initials}`)
    );

    const message = {
      type: 'seatMaps',
      config: JSON.stringify(config),
      flight: JSON.stringify(flight),
      availability: JSON.stringify(availabilityData),
      passengers: JSON.stringify(passengerList),
      currentDeckIndex: '0'
    };

    const targetOrigin = new URL(iframe.src).origin;
    iframe.contentWindow?.postMessage(message, targetOrigin);
    console.log('üîÅ PostMessage –ø–æ—Å–ª–µ Reset all');

  };

  // ======== üó∫Ô∏è –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã ==================
  const handleIframeLoad = () => {
    const iframe = iframeRef.current;
    if (!iframe) return;

    const flight = generateFlightData(segment, initialSegmentIndex, cabinClass);
    const availabilityData = availability || [];

    const colorPalette = ['blue', 'purple', 'teal', 'gray', 'green', 'red'];
    const getInitials = (p: Passenger) =>
      `${p.givenName?.[0] || ''}${p.surname?.[0] || ''}`.toUpperCase();

    const passengerList = cleanPassengers.map((p, index) => {
      // ‚úÖ –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π id ‚Äî –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞
      const pid = String(p.id ?? index); // ‚Üê –µ—Å–ª–∏ p.id –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å

      const seat = selectedSeats.find(s => s.passengerId === pid) || null;
      const isReadOnly = pid !== selectedPassengerId;

      const initials = getInitials(p);
      console.log(`üî§ [initials] ${p.givenName} ${p.surname} ‚Üí ${initials}`);

      const passenger = {
        id: pid,
        passengerType: 'ADT',
        seat,
        passengerLabel: p.label || `${p.givenName}/${p.surname}`,
        passengerColor: colorPalette[index % colorPalette.length],
        initials,
        abbr: initials,
        readOnly: isReadOnly
      };

      console.log(
        `üë§ [onLoad] ${passenger.passengerLabel} (id=${passenger.id}) ‚Üí seat: ${seat?.seatLabel || '‚Äî'}, readOnly: ${isReadOnly}`
      );
      console.log(`üî§ [initials] ${p.givenName} ${p.surname} ‚Üí ${initials}`);

      return passenger;
    });

    const message = {
      type: 'seatMaps',
      config: JSON.stringify(config),
      flight: JSON.stringify(flight),
      availability: JSON.stringify(availabilityData),
      passengers: JSON.stringify(passengerList),
      currentDeckIndex: '0'
    };

    console.log('[üöÄ passengerList –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ iframe - –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã]', passengerList);

    const targetOrigin = new URL(iframe.src).origin;
    iframe.contentWindow?.postMessage(message, targetOrigin);
    console.log('üì§ –ü–µ—Ä–≤—ã–π postMessage –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ onLoad');
  };


  // üîÅ –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–ª–∞—Å—Å–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
  useEffect(() => {
    const iframe = iframeRef.current;
    if (!iframe) return;

    const flight = generateFlightData(segment, initialSegmentIndex, cabinClass);
    const availabilityData = availability || [];

    const colorPalette = ['blue', 'purple', 'teal', 'gray', 'green', 'red'];
    const getInitials = (p: Passenger) =>
      `${p.givenName?.[0] || ''}${p.surname?.[0] || ''}`.toUpperCase();

    const passengerList = cleanPassengers.map((p, index) => {
      // ‚úÖ –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π id ‚Äî –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞
      const pid = String(p.id ?? index); // ‚Üê –µ—Å–ª–∏ p.id –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å

      const seat = selectedSeats.find(s => s.passengerId === pid) || null;
      const isReadOnly = pid !== selectedPassengerId;
      const initials = getInitials(p);

      const passenger = {
        id: pid,
        passengerType: 'ADT',
        seat,
        passengerLabel: p.label || `${p.givenName}/${p.surname}`,
        passengerColor: colorPalette[index % colorPalette.length],
        initials,
        abbr: initials,
        readOnly: isReadOnly
      };

      console.log(
        `üë§ [update cabinClass] ${passenger.passengerLabel} (id=${passenger.id}) ‚Üí seat: ${seat?.seatLabel || '‚Äî'}, readOnly: ${isReadOnly}`
      );

      return passenger;
    });

    const message = {
      type: 'seatMaps',
      config: JSON.stringify(config),
      flight: JSON.stringify(flight),
      availability: JSON.stringify(availabilityData),
      passengers: JSON.stringify(passengerList),
      currentDeckIndex: '0'
    };

    console.log('[üöÄ passengerList –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ iframe - —Å–º–µ–Ω–∞ –∫–ª–∞—Å—Å–∞]', passengerList);

    const targetOrigin = new URL(iframe.src).origin;
    iframe.contentWindow?.postMessage(message, targetOrigin);
    console.log('üì§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã cabinClass');
  }, [cabinClass]);

  // üîÅ –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –ø—Ä–∏ —Å–º–µ–Ω–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
  useEffect(() => {
    const iframe = iframeRef.current;
    if (!iframe) return;

    const flight = generateFlightData(segment, initialSegmentIndex, cabinClass);
    const availabilityData = availability || [];

    const colorPalette = ['blue', 'purple', 'teal', 'gray', 'green', 'red'];
    const getInitials = (p: Passenger) =>
      `${p.givenName?.[0] || ''}${p.surname?.[0] || ''}`.toUpperCase();

    const passengerList = cleanPassengers.map((p, index) => {

      // ‚úÖ –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π id ‚Äî –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞
      const pid = String(p.id ?? index); // ‚Üê –µ—Å–ª–∏ p.id –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å

      const seat = selectedSeats.find(s => s.passengerId === pid) || null;
      const isReadOnly = pid !== selectedPassengerId;
      const initials = getInitials(p);

      const passenger = {
        id: pid,
        passengerType: 'ADT',
        seat,
        passengerLabel: p.label || `${p.givenName}/${p.surname}`,
        passengerColor: colorPalette[index % colorPalette.length],
        initials,
        abbr: initials,
        readOnly: isReadOnly
      };

      console.log(
        `üë§ [update segment] ${passenger.passengerLabel} (id=${passenger.id}) ‚Üí seat: ${seat?.seatLabel || '‚Äî'}, readOnly: ${isReadOnly}`
      );

      return passenger;
    });

    const message = {
      type: 'seatMaps',
      config: JSON.stringify(config),
      flight: JSON.stringify(flight),
      availability: JSON.stringify(availabilityData),
      passengers: JSON.stringify(passengerList),
      currentDeckIndex: '0'
    };

    console.log('[üöÄ passengerList –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ iframe - —Å–º–µ–Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞]', passengerList);

    const targetOrigin = new URL(iframe.src).origin;
    iframe.contentWindow?.postMessage(message, targetOrigin);
    console.log('üì§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —Å–µ–≥–º–µ–Ω—Ç–∞');
  }, [initialSegmentIndex]);

  // ===  üõ≥Ô∏è üõ´  –ü–æ—Å–∞–¥–∫–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç –æ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ===
  useEffect(() => {
    const handleSeatSelection = (event: MessageEvent) => {
      console.log('üì© [seatmap] raw message received:', event);

      if (event.origin !== 'https://quicket.io') {
        console.warn('‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ origin:', event.origin);
        return;
      }

      let parsed;
      try {
        parsed = typeof event.data === 'string' ? JSON.parse(event.data) : event.data;
      } catch (e) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e, event.data);
        return;
      }

      // üõë –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ onSeatSelected
      if (!parsed?.onSeatSelected) {
        console.warn('üü° –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ onSeatSelected:', parsed?.type || '(unknown type)');
        return;
      }

      console.log('üì¶ [seatmap] parsed object:', parsed);
      console.log('üîë Keys in parsed:', Object.keys(parsed));

      let seatArray = parsed.onSeatSelected;
      console.log('ü™ë RAW seatArray:', seatArray);
      console.log('üìè –¢–∏–ø onSeatSelected:', typeof seatArray);

      if (typeof seatArray === 'string') {
        try {
          seatArray = JSON.parse(seatArray);
        } catch (e) {
          console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å onSeatSelected:', e, seatArray);
          return;
        }
      }

      if (!Array.isArray(seatArray)) {
        console.warn('‚ö†Ô∏è seatArray –Ω–µ –º–∞—Å—Å–∏–≤:', seatArray);
        return;
      }

      console.log('üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ onSeatSelected:', seatArray);

      const updated = seatArray
        .filter(p => p.id && p.seat?.seatLabel)
        .map(p => ({
          passengerId: String(p.id),
          seatLabel: p.seat.seatLabel.toUpperCase()
        }));

      console.log('üÜï updated selectedSeats:', updated);

      if (updated.length === 0) {
        console.warn('‚ö†Ô∏è updated –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π, –º–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }

      setSelectedSeats(prev => {
        const withoutOld = prev.filter(s => !updated.some(u => u.passengerId === s.passengerId));
        const merged = [...withoutOld, ...updated];
        onSeatChange?.(merged);
        // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤—Å–µ –ø–∞—Å—Å–∞–∂–∏—Ä—ã —Ä–∞—Å—Å–∞–∂–µ–Ω—ã?
        const allSeated = cleanPassengers.every(p =>
          merged.some(s => s.passengerId === p.id)
        );
        setBoardingComplete(allSeated);


        // üß≠ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–∞—Å—Å–∞–∂–∏—Ä—É –±–µ–∑ –º–µ—Å—Ç–∞
        const nextPassenger = cleanPassengers.find(
          (p) => !merged.some((s) => s.passengerId === String(p.id))
        );
        if (nextPassenger) {
          setSelectedPassengerId(String(nextPassenger.id));
          console.log(`‚û°Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞: ${nextPassenger.label || nextPassenger.givenName}`);
        }

        console.log('üßæ ===== –ü–∞—Å—Å–∞–∂–∏—Ä—ã –∏ –∏—Ö –º–µ—Å—Ç–∞ (after update) =====');
        cleanPassengers.forEach((p) => {
          const pid = String(p.id);
          const matchedSeat = merged.find(s => s.passengerId === pid);
          console.log(`üë§ ${p.label || p.givenName + ' ' + p.surname} (${pid}) ‚Üí ${matchedSeat?.seatLabel || '‚Äî'}`);
          // ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤—Å–µ –ø–∞—Å—Å–∞–∂–∏—Ä—ã —Ä–∞—Å—Å–∞–∂–µ–Ω—ã
          if (cleanPassengers.every(p => merged.some(s => s.passengerId === p.id))) {
            console.log('‚úÖ Boarding complete ‚Äî –≤—Å–µ –ø–∞—Å—Å–∞–∂–∏—Ä—ã —Ä–∞—Å—Å–∞–∂–µ–Ω—ã');
          }
        });

        return merged;
      });

    };

    window.addEventListener('message', handleSeatSelection);
    return () => window.removeEventListener('message', handleSeatSelection);
  }, [onSeatChange]);


  // ============== Passengers =====================
  const passengerPanel = (
    <>
      {console.log('üì∫ Re-render passengerPanel:', selectedSeats)}
      <div>
        <strong>Passengers</strong>

        {/* ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π —Ä–∞—Å—Å–∞–¥–∫–µ */}
        {boardingComplete && (
          <div style={{
            backgroundColor: '#e6ffe6',
            padding: '0.75rem',
            margin: '1rem 0',
            border: '1px solid #00cc66',
            borderRadius: '5px',
            fontWeight: 'bold',
            color: '#006633'
          }}>
            ‚úÖ Boarding complete ‚Äî all passengers have seats
          </div>
        )}

        <div style={{ margin: '1rem 0' }}>
          {cleanPassengers.map((p) => {
            const passengerId = String(p.id); // üß† –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Å—Ç—Ä–æ–∫–µ
            const seat = selectedSeats.find((s) => s.passengerId === passengerId);
            const isActive = selectedPassengerId === passengerId;

            return (
              <div key={p.id} style={{ marginBottom: '1rem' }}>
                <label style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                  <input
                    type="radio"
                    name="activePassenger"
                    value={p.id}
                    checked={selectedPassengerId === String(p.id)}
                    onChange={() => setSelectedPassengerId(passengerId)}
                  />
                  {p.label || `${p.givenName} ${p.surname}`}
                </label>
                <div>
                  Seat: <strong>{seat?.seatLabel || '‚Äî'}</strong>
                </div>
              </div>
            );
          })}
        </div>

        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
          <div>
            ‚úÖ Seats assigned:{' '}
            {
              cleanPassengers.filter((p) =>
                selectedSeats.some((s) => s.passengerId === String(p.id))
              ).length
            } of {cleanPassengers.length}
          </div>
          <button onClick={handleResetSeat}>üîÅ Reset all</button>
        </div>
      </div>
    </>
  );
  // ‚úä ‚öíÔ∏è üß∞ ================= show Seat Map =====================
  
  return (
    <SeatMapModalLayout
      flightInfo={flightInfo}
      passengerPanel={passengerPanel} // ‚¨ÖÔ∏è –≤–æ—Ç —Ç–∞–∫, –∏–º–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–ø—Å

    >
      <iframe
        ref={iframeRef}
        title="Seat Map"
        src="https://quicket.io/react-proxy-app/"
        onLoad={handleIframeLoad}
        style={{ width: '100%', height: '100%', border: 'none' }}
      />
    </SeatMapModalLayout>
  );

};

export default SeatMapComponentBase;