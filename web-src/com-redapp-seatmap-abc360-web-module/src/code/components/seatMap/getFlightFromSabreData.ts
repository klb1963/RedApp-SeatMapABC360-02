// —Ñ–∞–π–ª: code/components/SeatMap/getFlightFromSabreData.ts


export const getFlightFromSabreData = (
  data: any,
  segmentIndex: number = 0
) => {
  const segment = data.flightSegments?.[segmentIndex];

  if (!segment) {
    console.warn(`‚ö†Ô∏è Segment index ${segmentIndex} not found`);
    return null;
  }

  console.log('üîç –ò—Å—Ö–æ–¥–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç:', segment);

  const airlineCode =
    segment?.MarketingAirline?.EncodeDecodeElement?.Code ||
    segment?.marketingAirline ||
    'XX';

  const flightNo =
    segment?.FlightNumber ||
    segment?.flightNumber ||
    '000';

  const origin =
    segment?.OriginLocation?.EncodeDecodeElement?.Code ||
    segment?.origin ||
    '???';

  const destination =
    segment?.DestinationLocation?.EncodeDecodeElement?.Code ||
    segment?.destination ||
    '???';

  const rawDeparture =
    segment?.departureDate ||
    segment?.departureDateTime || 
    '';

  const departureDate = rawDeparture
    ? new Date(rawDeparture).toISOString().split('T')[0]
    : '';

  if (!departureDate) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞ –∏–∑:', rawDeparture);
  } else {
    console.log('üìÖ –ò–∑–≤–ª–µ—á–µ–Ω–∞ –¥–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞:', departureDate);
  }

  const cabinClass = segment?.cabinClass || 'E';

  const equipment =
  segment?.Equipment?.EncodeDecodeElement?.SimplyDecoded ||
  segment?.equipment ||
  '';

  const result = {
    id: '111',
    airlineCode,
    flightNo,
    departureDate,
    departure: origin,
    arrival: destination,
    cabinClass: cabinClass === 'A' ? undefined : cabinClass,
    passengerType: 'ADT',
    equipment
  };

  console.log('‚úÖ [getFlightFromSabreData] –ò—Ç–æ–≥–æ–≤—ã–π –æ–±—ä–µ–∫—Ç flight:', result);

  return result;
};