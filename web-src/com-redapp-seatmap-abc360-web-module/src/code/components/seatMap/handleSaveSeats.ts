// file: handleSaveSeats.ts

import { getService } from '../../Context';
import { ISoapApiService } from 'sabre-ngv-communication/interfaces/ISoapApiService';
import { PnrPublicService } from 'sabre-ngv-app/app/services/impl/PnrPublicService';
import { PublicModalsService } from 'sabre-ngv-modals/services/PublicModalService';

export const handleSaveSeats = async (selectedSeats: any[]): Promise<void> => {
  if (!Array.isArray(selectedSeats) || selectedSeats.length === 0) {
    alert('‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.');
    return;
  }

  console.log('üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Å—Ç–∞ –≤ Sabre:', selectedSeats);

  const soap = getService(ISoapApiService);
  const pnrService = getService(PnrPublicService);
  const modalService = getService(PublicModalsService);

  try {
    // üìç –°–±–æ—Ä –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤ <SeatUpdate>
    const seatUpdateBlocks = selectedSeats.map(seat => {
      return `
        <SeatUpdate>
          <PassengerRef>${seat.passengerId}</PassengerRef>
          <SegmentRef>1</SegmentRef>
          <Seat>${seat.seatLabel}</Seat>
        </SeatUpdate>`;
    }).join('');

    // üìÑ –û–±—â–∏–π XML
    const xml = `
      <UpdateReservationRQ xmlns="http://services.sabre.com/sp/updatereservation/v1_6">
        <Profile>
          <UniqueID ID="" />
        </Profile>
        <ReservationUpdate>
          ${seatUpdateBlocks}
        </ReservationUpdate>
      </UpdateReservationRQ>
    `;

    const response = await soap.callSws({
      action: 'UpdateReservationRQ',
      payload: xml,
      authTokenType: 'SESSION'
    });

    console.log('‚úÖ –í—Å–µ –º–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã:', response.value);

    await pnrService.refreshData();
    modalService.closeReactModal();

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
};