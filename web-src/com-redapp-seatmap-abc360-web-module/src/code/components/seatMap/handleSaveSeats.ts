// file: /code/components/seatMap/handleSaveSeats.ts

import { getService } from '../../Context';
import { ISoapApiService } from 'sabre-ngv-communication/interfaces/ISoapApiService';
import { PnrPublicService } from 'sabre-ngv-app/app/services/impl/PnrPublicService';
import { PublicModalsService } from 'sabre-ngv-modals/services/PublicModalService';

/**
 * –í–†–ï–ú–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: —Ç–µ—Å—Ç–∏—Ä—É–µ–º AirSeatRQ —Å –∂—ë—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–º NameNumber –∏ –º–µ—Å—Ç–æ–º.
 */
export const handleSaveSeats = async (): Promise<void> => {
  const soap = getService(ISoapApiService);
  const pnrService = getService(PnrPublicService);
  const modalService = getService(PublicModalsService);

  try {
    const xml = `
      <AirSeatRQ Version="2.1.1"
        xmlns="http://webservices.sabre.com/sabreXML/2011/10"
        xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <Seats>
          <Seat>
            <NameSelect NameNumber="1.1"/>
            <SeatSelect Number="10A"/>
            <SegmentSelect Number="1"/>
          </Seat>
        </Seats>
      </AirSeatRQ>
    `.trim();

    console.log('üì§ AirSeatRQ HARDCODED XML:\n', xml);

    const response = await soap.callSws({
      action: 'AirSeatRQ',
      payload: xml,
      authTokenType: 'SESSION'
    });

    console.log('üì© –û—Ç–≤–µ—Ç –æ—Ç Sabre:\n', response.value);

    if (response.value.includes('<Success')) {
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ AirSeatRQ (hardcoded).');
    } else {
      console.warn('‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç <Success>. –ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ.');
    }

    await pnrService.refreshData();
    modalService.closeReactModal();

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ AirSeatRQ (hardcoded):', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –º–µ—Å—Ç–∞. –°–º. –∫–æ–Ω—Å–æ–ª—å.');
  }
};