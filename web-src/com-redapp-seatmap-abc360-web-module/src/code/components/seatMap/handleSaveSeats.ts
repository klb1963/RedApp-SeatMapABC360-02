// file: /code/components/seatMap/handleSaveSeats.ts

import { getService } from '../../Context';
import { ISoapApiService } from 'sabre-ngv-communication/interfaces/ISoapApiService';
import { PnrPublicService } from 'sabre-ngv-app/app/services/impl/PnrPublicService';
import { PublicModalsService } from 'sabre-ngv-modals/services/PublicModalService';
import { loadPnrDetailsFromSabre } from '../../services/loadPnrDetailsFromSabre';
import { SelectedSeat } from './SeatMapComponentBase';

export const handleSaveSeats = async (
    selectedSeats: SelectedSeat[],
    segmentNumber: string
): Promise<void> => {
  const soap = getService(ISoapApiService);
  const pnrService = getService(PnrPublicService);
  const modalService = getService(PublicModalsService);

  const recordLocator = pnrService.getRecordLocator();
  if (!recordLocator) {
    console.warn('‚ö†Ô∏è No active PNR. Please create or retrieve a PNR first.');
    throw new Error('No active PNR');
  }

  if (!segmentNumber) {
    console.error('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω segmentId –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Å—Ç');
    alert('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —Å–µ–≥–º–µ–Ω—Ç.');
    return;
  }

  try {
    const { parsedData } = await loadPnrDetailsFromSabre();
    const passengers = parsedData.passengers || [];

    const seatsForCurrentSegment = selectedSeats.filter(
      seat => seat.segmentNumber === segmentNumber
    );

    if (!seatsForCurrentSegment.length) {
      console.warn(`‚ö†Ô∏è –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ ${segmentNumber}`);
      alert(`‚ö†Ô∏è –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ ${segmentNumber}`);
      return;
    }

    const seatTags = seatsForCurrentSegment
      .map(seat => {
        const pax = passengers.find(
          p => p.id === seat.passengerId || p.nameNumber === seat.passengerId
        );
        if (!pax || !pax.nameNumber || !seat.seatLabel) {
          console.warn(
            `‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ø–∞—Å—Å–∞–∂–∏—Ä=${seat.passengerId}, –º–µ—Å—Ç–æ=${seat.seatLabel}`
          );
          return null;
        }
        return `
          <Seat>
            <NameSelect NameNumber="${pax.nameNumber}"/>
            <SeatSelect Number="${seat.seatLabel}"/>
            <SegmentSelect Number="${segmentNumber}"/>
          </Seat>`.trim();
      })
      .filter(Boolean)
      .join('\n');

    if (!seatTags) {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ Seat —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ ${segmentNumber}`);
      alert(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ Seat —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ ${segmentNumber}`);
      return;
    }

    const xml = `
      <AirSeatRQ Version="2.1.1"
        xmlns="http://webservices.sabre.com/sabreXML/2011/10"
        xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <Seats>
          ${seatTags}
        </Seats>
      </AirSeatRQ>
    `.trim();

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AirSeatRQ –≤ Sabre:\n', xml);

    const response = await soap.callSws({
      action: 'AirSeatLLSRQ',
      payload: xml,
      authTokenType: 'SESSION',
    });

    console.log('üì© –û—Ç–≤–µ—Ç –æ—Ç Sabre:\n', response.value);

    if (response.value.includes('<Error')) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç Sabre:\n', response.value);
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –º–µ—Å—Ç. –°–º. –∫–æ–Ω—Å–æ–ª—å.');
      return;
    }

    console.log('‚úÖ –ú–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã.');
    await pnrService.refreshData();
    modalService.closeReactModal();

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ AirSeatRQ:', error);
    alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –º–µ—Å—Ç (AirSeatRQ). –°–º. –∫–æ–Ω—Å–æ–ª—å.');
  }
};