// file: handleSaveSeats.ts

import { getService } from '../../Context';
import { ISoapApiService } from 'sabre-ngv-communication/interfaces/ISoapApiService';
import { PnrPublicService } from 'sabre-ngv-app/app/services/impl/PnrPublicService';
import { PublicModalsService } from 'sabre-ngv-modals/services/PublicModalService';

export const handleSaveSeats = async (selectedSeats: { passengerId: string; seatLabel: string }[]): Promise<void> => {
  if (!Array.isArray(selectedSeats) || selectedSeats.length === 0) {
    alert('‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.');
    return;
  }

  console.log('üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Å—Ç–∞ –≤ Sabre —á–µ—Ä–µ–∑ UpdateReservationRQ:', selectedSeats);

  const soap = getService(ISoapApiService);
  const pnrService = getService(PnrPublicService);
  const modalService = getService(PublicModalsService);

  try {
    const seatUpdateBlocks = selectedSeats.map(seat => {
      return `
        <SeatUpdate>
          <PassengerRef>${seat.passengerId}</PassengerRef>
          <SegmentRef>1</SegmentRef>
          <Seat>${seat.seatLabel}</Seat>
        </SeatUpdate>
      `;
    }).join('');

    const xml = `
      <UpdateReservationRQ xmlns="http://services.sabre.com/sp/updatereservation/v1_6">
        <ReservationUpdate>
          ${seatUpdateBlocks}
        </ReservationUpdate>
      </UpdateReservationRQ>
    `;

    console.log('üì§ XML-–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏:', xml);

    const response = await soap.callSws({
      action: 'UpdateReservationRQ',
      payload: xml,
      authTokenType: 'SESSION'
    });

    console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Sabre:', response.value);

    if (response.value.includes('<Success')) {
      console.log('‚úÖ –í—Å–µ –º–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã.');
    } else {
      console.warn('‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç <Success>. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏.');
    }

    await pnrService.refreshData();
    modalService.closeReactModal();

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
};

