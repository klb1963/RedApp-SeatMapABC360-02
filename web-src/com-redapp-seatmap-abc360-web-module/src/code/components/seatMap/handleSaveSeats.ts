// file: handleSaveSeats.ts

import { getService } from '../../Context';
import { ISoapApiService } from 'sabre-ngv-communication/interfaces/ISoapApiService';
import { PnrPublicService } from 'sabre-ngv-app/app/services/impl/PnrPublicService';
import { PublicModalsService } from 'sabre-ngv-modals/services/PublicModalService';

/**
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç PassengerDetailsRQ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Å—Ç –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º.
 * –ü–µ—Ä–µ–¥–∞—ë–º nameNumber –≤ —Ñ–æ—Ä–º–∞—Ç–µ NameNumber (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2.1").
 */
export const handleSaveSeats = async (
  selectedSeats: { nameNumber: string; seatLabel: string }[] // ‚úÖ –∑–∞–º–µ–Ω–∏–ª–∏ nameAssocId –Ω–∞ nameNumber
): Promise<void> => {
  if (!Array.isArray(selectedSeats) || selectedSeats.length === 0) {
    alert('‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.');
    return;
  }

  console.log('üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ PassengerDetailsRQ:', selectedSeats);

  const soap = getService(ISoapApiService);
  const pnrService = getService(PnrPublicService);
  const modalService = getService(PublicModalsService);

  try {
    const seatRequests = selectedSeats.map(seat => {
      const nameNumber = seat.nameNumber; // ‚úÖ nameNumber —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: "2.1"
      return `
        <Service SSR_Code="SEAT" SSR_Type="A" SegmentNumber="A">
          <PersonName NameNumber="${nameNumber}" />
          <Text>${seat.seatLabel}</Text>
        </Service>
      `.trim();
    }).join('\n');

    const xml = `
      <PassengerDetailsRQ xmlns="http://services.sabre.com/sp/pd/v3_5" version="3.5.0" ignoreOnError="false" haltOnError="false">
        <PostProcessing ignoreAfter="false" unmaskCreditCard="true">
          <RedisplayReservation waitInterval="1000"/>
        </PostProcessing>
        <SpecialReqDetails>
          <SpecialServiceRQ>
            <SpecialServiceInfo>
              ${seatRequests}
            </SpecialServiceInfo>
          </SpecialServiceRQ>
        </SpecialReqDetails>
      </PassengerDetailsRQ>
    `.trim();

    console.log('üì§ PassengerDetailsRQ XML:\n', xml);

    const response = await soap.callSws({
      action: 'PassengerDetailsRQ',
      payload: xml,
      authTokenType: 'SESSION'
    });

    console.log('üì© –û—Ç–≤–µ—Ç –æ—Ç Sabre:\n', response.value);

    if (response.value.includes('<Success')) {
      console.log('‚úÖ –ú–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
    } else {
      console.warn('‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç <Success>. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ XML –∏ PNR.');
    }

    await pnrService.refreshData();
    modalService.closeReactModal();

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PassengerDetailsRQ:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.');
  }
};